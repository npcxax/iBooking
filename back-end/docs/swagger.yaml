definitions:
  models.Administrator:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.Booking:
    properties:
      bookingTime:
        description: booking time, after it 15 min will auto cancel booking and free
          seat and notify student and record one default
        type: string
      createdAt:
        type: string
      duration:
        description: max 4h, unit hour
        type: integer
      id:
        type: integer
      isSigned:
        description: 0 represent waiting, 1 represent attend, 2 represent delay
        type: integer
      roomID:
        type: integer
      seatID:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.Room:
    type: object
  models.Seat:
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: 10.177.88.168:8800
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: iBooking back-end api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: iBooking
  version: "1.0"
paths:
  /admin/:
    post:
      consumes:
      - application/json
      description: create admin
      parameters:
      - description: admin 's username and password
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Administrator'
      produces:
      - application/json
      responses: {}
      summary: create admin
      tags:
      - Admin
  /admin/login/:
    post:
      consumes:
      - application/json
      description: admin login
      parameters:
      - description: Admin login with username and password
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Administrator'
      produces:
      - application/json
      responses: {}
      summary: Admin Login
      tags:
      - Admin
  /booking/:
    post:
      consumes:
      - application/json
      description: book seat
      parameters:
      - description: Book a seat by giving seat_id and user_id
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: book seat
      tags:
      - Booking
  /booking/bookingHistory/{userID}:
    get:
      consumes:
      - application/json
      description: get booking history
      parameters:
      - description: booking history
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get booking history
      tags:
      - Booking
  /booking/deleteBooking:
    post:
      consumes:
      - application/json
      description: delete booking by ID
      parameters:
      - description: booking id
        in: body
        name: booking_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete booking
      tags:
      - Booking
  /booking/getBookingByID/{booking_id}:
    get:
      consumes:
      - application/json
      description: get booking by ID
      parameters:
      - description: booking id
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get booking by ID
      tags:
      - Booking
  /booking/getBookingByUserID/{user_id}:
    get:
      consumes:
      - application/json
      description: get booking by user ID
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get booking by user ID
      tags:
      - Booking
  /booking/updateBooking:
    post:
      consumes:
      - application/json
      description: update booking , change isSigned
      parameters:
      - description: booking information
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/models.Booking'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update booking
      tags:
      - Booking
  /room/:
    get:
      consumes:
      - application/json
      description: get all room information
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get all room
      tags:
      - Room
  /room/auth/:
    get:
      consumes:
      - application/json
      description: get room by id
      parameters:
      - description: Create Room by giving room information
        in: path
        name: admin
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get room
      tags:
      - Room
  /room/auth/createRoom:
    post:
      consumes:
      - application/json
      description: create room
      parameters:
      - description: Create Room by giving room information
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Room'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: create room
      tags:
      - Room
  /room/auth/deleteRoom:
    post:
      consumes:
      - application/json
      description: delete room by id
      parameters:
      - description: Delete Room by giving room id
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete room
      tags:
      - Room
  /room/auth/updateRoom:
    post:
      consumes:
      - application/json
      description: update room
      parameters:
      - description: Update Room by giving room id and room details
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/models.Room'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update room
      tags:
      - Room
  /seat/:
    get:
      description: get all seats
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get seat
      tags:
      - Seat
  /seat/{seat_id}:
    get:
      consumes:
      - application/json
      description: get seat by id
      parameters:
      - description: Get Seat by giving seat id
        in: path
        name: seat_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get seat by id
      tags:
      - Seat
  /seat/auth/createSeat:
    post:
      consumes:
      - application/json
      description: create seat
      parameters:
      - description: Create Seat by giving seat information
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Seat'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: create seat
      tags:
      - Seat
  /seat/auth/deleteSeat:
    post:
      consumes:
      - application/json
      description: delete seat by id
      parameters:
      - description: Delete Seat by giving seat id
        in: body
        name: seat_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete seat
      tags:
      - Seat
  /seat/auth/updateSeat:
    post:
      consumes:
      - application/json
      description: update seat
      parameters:
      - description: Update Seat by giving seat information
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Seat'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update seat
      tags:
      - Seat
  /seat/getSeatByRoomID/{room_id}:
    get:
      consumes:
      - application/json
      description: get seat by room id
      parameters:
      - description: Get Seats by giving room id
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get seat by room id
      tags:
      - Seat
  /user/:
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: user 's username and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses: {}
      summary: create user
      tags:
      - User
  /user/auth/deleteUser:
    post:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: user id
        in: body
        name: user_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      summary: delete user
      tags:
      - User
  /user/auth/getUserByID/{user_id}:
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: get user by id
      tags:
      - User
  /user/auth/getUserByUsername/{username}:
    get:
      consumes:
      - application/json
      description: get user by username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: get user by username
      tags:
      - User
  /user/auth/password:
    post:
      consumes:
      - application/json
      description: update password
      parameters:
      - description: userID and password
        in: body
        name: userinfo
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      summary: update password
      tags:
      - User
  /user/auth/updateUser:
    post:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: user information
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses: {}
      summary: update user
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: user login
      parameters:
      - description: user 's username and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses: {}
      summary: user login
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
